_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[11],{"3c6H":function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/authorization",function(){return r("uma/")}])},"59oN":function(e,n,r){"use strict";var t=r("q1tI"),a=r.n(t),o=r("qKvR");a.a.createElement;n.a=function(e){var n=e.children;return Object(o.a)("div",{className:"my-8 px-6 py-4 text-orange-900 text-base leading-normal bg-orange-200 rounded-r border-l-4 border-orange-400",children:n})}},"uma/":function(e,n,r){"use strict";r.r(n),r.d(n,"meta",(function(){return h})),r.d(n,"default",(function(){return v}));var t=r("wx14"),a=r("h4VS"),o=r("Ff2n"),s=r("q1tI"),i=r.n(s),u=r("7ljp"),c=r("B+lO"),l=r.n(c),d=r("5Yp1"),p=(r("59oN"),r("SrvX"));r("qKvR"),i.a.createElement;function m(){var e=Object(a.a)(["\n        class UsersController < ApplicationController\n          def index\n            render inertia: 'Users/Index', props: {\n              can: {\n                create_user: can?(:create, User)\n              },\n              users: User.all.map do |user|\n                user.as_json(\n                  only: [ :id, :first_name, :last_name, :email ]\n                ).merge(\n                  can: {\n                    edit_user: can?(:edit, user)\n                  }\n                )\n              end\n            }\n          end\n        end\n      "]);return m=function(){return e},e}function b(){var e=Object(a.a)(["\n        class UsersController extends Controller\n        {\n            public function index()\n            {\n                return Inertia::render('Users/Index', [\n                    'can' => [\n                        'create_user' => Auth::user()->can('users.create'),\n                    ],\n                    'users' => User::all()->map(function ($user) {\n                        return [\n                            'first_name' => $user->first_name,\n                            'last_name' => $user->last_name,\n                            'email' => $user->email,\n                            'can' => [\n                                'edit_user' => Auth::user()->can('users.edit', $user),\n                            ]\n                        ];\n                    }),\n                ]);\n            }\n        }\n      "]);return b=function(){return e},e}var h={title:"Authorization"},_={meta:h},f=d.b;function v(e){var n=e.components,r=Object(o.a)(e,["components"]);return Object(u.b)(f,Object(t.a)({},_,r,{components:n,mdxType:"MDXLayout"}),Object(u.b)("h1",null,"Authorization"),Object(u.b)("p",null,"With Inertia, authorization is best handled server-side in your policies. However, you may be wondering how to check against your policies from within your JavaScript page components, since you won't have access to your server-side helpers. The simplest approach here is to pass your authorization checks as props to your page components."),Object(u.b)(p.a,{examples:[{name:"Laravel",language:"php",code:l()(b())},{name:"Rails",language:"ruby",code:l()(m())}],mdxType:"TabbedCodeExamples"}))}v.isMDXComponent=!0}},[["3c6H",0,2,5,1,3,4]]]);