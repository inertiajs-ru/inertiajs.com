_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[9],{Gn28:function(n,e,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/asset-versioning",function(){return a("HX+P")}])},"HX+P":function(n,e,a){"use strict";a.r(e),a.d(e,"meta",(function(){return g})),a.d(e,"default",(function(){return v}));var t=a("wx14"),i=a("h4VS"),s=a("Ff2n"),r=a("q1tI"),o=a.n(r),l=a("7ljp"),u=a("B+lO"),c=a.n(u),d=a("5Yp1"),h=a("SrvX");a("qKvR"),o.a.createElement;function b(){var n=Object(i.a)(["\n        InertiaRails.configure do |config|\n          config.version = '1.0'\n        end\n\n        # You can also use lazy evaluation\n        InertiaRails.configure do |config|\n          config.version = lambda { InertiaRails::Version.last }\n        end\n      "],["\n        InertiaRails.configure do |config|\n          config.version = '1.0'\n        end\\n\n        # You can also use lazy evaluation\n        InertiaRails.configure do |config|\n          config.version = lambda { InertiaRails::Version.last }\n        end\n      "]);return b=function(){return n},n}function p(){var n=Object(i.a)(["\n        /*\n        |----------------------------------------------------------------\n        | Via the HandleInertiaRequests middleware (recommended)\n        |----------------------------------------------------------------\n        */\n\n        class HandleInertiaRequests extends Middleware\n        {\n            public function version(Request $request)\n            {\n                return parent::version($request);\n            }\n        }\n\n        /*\n        |----------------------------------------------------------------\n        | Manually\n        |----------------------------------------------------------------\n        */\n\n        use Inertia\\Inertia;\n\n        Inertia::version($version);\n        Inertia::version(fn () => $version); // Lazily\n      "],["\n        /*\n        |----------------------------------------------------------------\n        | Via the HandleInertiaRequests middleware (recommended)\n        |----------------------------------------------------------------\n        */\\n\n        class HandleInertiaRequests extends Middleware\n        {\n            public function version(Request $request)\n            {\n                return parent::version($request);\n            }\n        }\\n\n        /*\n        |----------------------------------------------------------------\n        | Manually\n        |----------------------------------------------------------------\n        */\\n\n        use Inertia\\\\Inertia;\\n\n        Inertia::version($version);\n        Inertia::version(fn () => $version); // Lazily\n      "]);return p=function(){return n},n}var g={title:"Asset versioning",links:[{url:"#introduction",name:"Introduction"},{url:"#configuring",name:"Configuring"},{url:"#cache-busting",name:"Cache busting"}]},f={meta:g},m=d.b;function v(n){var e=n.components,a=Object(s.a)(n,["components"]);return Object(l.b)(m,Object(t.a)({},f,a,{components:e,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Asset versioning"),Object(l.b)("p",null,"One common challenge with single-page apps is refreshing site assets when they've been changed. Inertia makes this easy by optionally tracking the current version of your site assets. In the event that an asset changes, Inertia will automatically make a hard page visit instead of a normal ajax visit on the next request."),Object(l.b)("h2",null,"Configuring"),Object(l.b)("p",null,"To enable automatic asset refreshing, you simply need to tell Inertia what the current version of your assets is. This can be any ",Object(l.b)("inlineCode",{parentName:"p"},"string")," (letters, numbers, or a file hash), as long as it changes when your assets have been updated."),Object(l.b)(h.a,{examples:[{name:"Laravel",language:"php",code:c()(p()),description:'The HandleInertiaRequests middleware provides a sensible default for Laravel applications, which uses either a hash of the "app.asset_url" config value or the mix-manifest.json file.'},{name:"Rails",language:"ruby",code:c()(b())}],mdxType:"TabbedCodeExamples"}),Object(l.b)("h2",null,"Cache busting"),Object(l.b)("p",null,"Asset refreshing in Inertia works on the assumption that a hard page visit will trigger your assets to reload. However, Inertia doesn't actually do anything to force this. Typically this is done with some form of cache busting. For example, appending a version query parameter to the end of your asset URLs."),Object(l.b)("p",null,"If you're using Laravel Mix, you can do this automatically by enabling ",Object(l.b)("a",Object(t.a)({parentName:"p"},{href:"https://laravel.com/docs/mix#versioning-and-cache-busting"}),"versioning")," in your ",Object(l.b)("inlineCode",{parentName:"p"},"webpack.mix.js")," file."))}v.isMDXComponent=!0}},[["Gn28",0,2,5,1,3,4]]]);