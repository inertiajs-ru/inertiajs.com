_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[18],{"0zQ/":function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/forms",function(){return a("FoX/")}])},"FoX/":function(e,n,a){"use strict";a.r(n),a.d(n,"meta",(function(){return x})),a.d(n,"default",(function(){return I}));var t=a("h4VS"),r=a("wx14"),i=a("Ff2n"),l=a("q1tI"),s=a.n(l),o=a("7ljp"),m=a("B+lO"),u=a.n(m),d=a("5Yp1"),b=a("SrvX");a("qKvR"),s.a.createElement;function f(){var e=Object(t.a)(['\n        <script>\n          import { Inertia } from \'@inertiajs/inertia\'\n\n          export let errors = {}\n\n          let values = {\n            first_name: null,\n            last_name: null,\n            email: null,\n          }\n\n          function handleSubmit() {\n            Inertia.post(\'/users\', values)\n          }\n        <\/script>\n\n        <form on:submit|preventDefault={handleSubmit}>\n          <label for="first_name">First name:</label>\n          <input id="first_name" bind:value={values.first_name}>\n          {#if errors.first_name}<div>{errors.first_name}</div>{/if}\n\n          <label for="last_name">Last name:</label>\n          <input id="last_name" bind:value={values.last_name}>\n          {#if errors.last_name}<div>{errors.last_name}</div>{/if}\n\n          <label for="email">Email:</label>\n          <input id="email" bind:value={values.email}>\n          {#if errors.email}<div>{errors.email}</div>{/if}\n\n          <button type="submit">Submit</button>\n        </form>\n      '],['\n        <script>\n          import { Inertia } from \'@inertiajs/inertia\'\\n\n          export let errors = {}\\n\n          let values = {\n            first_name: null,\n            last_name: null,\n            email: null,\n          }\\n\n          function handleSubmit() {\n            Inertia.post(\'/users\', values)\n          }\n        <\/script>\\n\n        <form on:submit|preventDefault={handleSubmit}>\n          <label for="first_name">First name:</label>\n          <input id="first_name" bind:value={values.first_name}>\n          {#if errors.first_name}<div>{errors.first_name}</div>{/if}\\n\n          <label for="last_name">Last name:</label>\n          <input id="last_name" bind:value={values.last_name}>\n          {#if errors.last_name}<div>{errors.last_name}</div>{/if}\\n\n          <label for="email">Email:</label>\n          <input id="email" bind:value={values.email}>\n          {#if errors.email}<div>{errors.email}</div>{/if}\\n\n          <button type="submit">Submit</button>\n        </form>\n      ']);return f=function(){return e},e}function p(){var e=Object(t.a)(['\n        import { Inertia } from \'@inertiajs/inertia\'\n        import { usePage } from \'@inertiajs/inertia-react\'\n        import React, { useState } from \'react\'\n\n        export default function Edit() {\n          const { errors } = usePage().props\n\n          const [values, setValues] = useState({\n            first_name: null,\n            last_name: null,\n            email: null,\n          })\n\n          function handleChange(e) {\n            setValues(values => ({\n              ...values,\n              [e.target.id]: e.target.value,\n            }))\n          }\n\n          function handleSubmit(e) {\n            e.preventDefault()\n            Inertia.post(\'/users\', values)\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <label for="first_name">First name:</label>\n              <input id="first_name" value={values.first_name} onChange={handleChange} />\n              {errors.first_name && <div>{errors.first_name[0]}</div>}\n              <label for="last_name">Last name:</label>\n              <input id="last_name" value={values.last_name} onChange={handleChange} />\n              {errors.last_name && <div>{errors.last_name[0]}</div>}\n              <label for="email">Email:</label>\n              <input id="email" value={values.email} onChange={handleChange} />\n              {errors.email && <div>{errors.email[0]}</div>}\n              <button type="submit">Submit</button>\n            </form>\n          )\n        }\n      '],['\n        import { Inertia } from \'@inertiajs/inertia\'\n        import { usePage } from \'@inertiajs/inertia-react\'\n        import React, { useState } from \'react\'\\n\n        export default function Edit() {\n          const { errors } = usePage().props\\n\n          const [values, setValues] = useState({\n            first_name: null,\n            last_name: null,\n            email: null,\n          })\\n\n          function handleChange(e) {\n            setValues(values => ({\n              ...values,\n              [e.target.id]: e.target.value,\n            }))\n          }\\n\n          function handleSubmit(e) {\n            e.preventDefault()\n            Inertia.post(\'/users\', values)\n          }\\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <label for="first_name">First name:</label>\n              <input id="first_name" value={values.first_name} onChange={handleChange} />\n              {errors.first_name && <div>{errors.first_name[0]}</div>}\n              <label for="last_name">Last name:</label>\n              <input id="last_name" value={values.last_name} onChange={handleChange} />\n              {errors.last_name && <div>{errors.last_name[0]}</div>}\n              <label for="email">Email:</label>\n              <input id="email" value={values.email} onChange={handleChange} />\n              {errors.email && <div>{errors.email[0]}</div>}\n              <button type="submit">Submit</button>\n            </form>\n          )\n        }\n      ']);return p=function(){return e},e}function c(){var e=Object(t.a)(['\n        <template>\n          <form @submit.prevent="submit">\n            <label for="first_name">First name:</label>\n            <input id="first_name" v-model="form.first_name" />\n            <div v-if="errors.first_name">{{ errors.first_name[0] }}</div>\n            <label for="last_name">Last name:</label>\n            <input id="last_name" v-model="form.last_name" />\n            <div v-if="errors.last_name">{{ errors.last_name[0] }}</div>\n            <label for="email">Email:</label>\n            <input id="email" v-model="form.email" />\n            <div v-if="errors.email">{{ errors.email[0] }}</div>\n            <button type="submit">Submit</button>\n          </form>\n        </template>\n\n        <script>\n        export default {\n          props: {\n            errors: Object,\n          },\n          data() {\n            return {\n              form: {\n                first_name: null,\n                last_name: null,\n                email: null,\n              },\n            }\n          },\n          methods: {\n            submit() {\n              this.$inertia.post(\'/users\', this.form)\n            },\n          },\n        }\n        <\/script>\n      '],['\n        <template>\n          <form @submit.prevent="submit">\n            <label for="first_name">First name:</label>\n            <input id="first_name" v-model="form.first_name" />\n            <div v-if="errors.first_name">{{ errors.first_name[0] }}</div>\n            <label for="last_name">Last name:</label>\n            <input id="last_name" v-model="form.last_name" />\n            <div v-if="errors.last_name">{{ errors.last_name[0] }}</div>\n            <label for="email">Email:</label>\n            <input id="email" v-model="form.email" />\n            <div v-if="errors.email">{{ errors.email[0] }}</div>\n            <button type="submit">Submit</button>\n          </form>\n        </template>\\n\n        <script>\n        export default {\n          props: {\n            errors: Object,\n          },\n          data() {\n            return {\n              form: {\n                first_name: null,\n                last_name: null,\n                email: null,\n              },\n            }\n          },\n          methods: {\n            submit() {\n              this.$inertia.post(\'/users\', this.form)\n            },\n          },\n        }\n        <\/script>\n      ']);return c=function(){return e},e}function v(){var e=Object(t.a)(["\n        # todo\n      "]);return v=function(){return e},e}function h(){var e=Object(t.a)(["\n        class HandleInertiaRequests extends Middleware\n        {\n            public function share(Request $request)\n            {\n                return array_merge(parent::share($request), [\n                    'errors' => fn () => $request->session()->get('errors')\n                        ? $request->session()->get('errors')->getBag('default')->getMessages()\n                        : (object) [];\n                    },\n                ]);\n            }\n        }\n      "]);return h=function(){return e},e}function _(){var e=Object(t.a)(["\n        class UsersController < ApplicationController\n          def index\n            render inertia: 'Users/Index', props: { users: User.all }\n          end\n\n          def create\n            User.create params.require(:user).permit(:first_name, :last_name, :email)\n\n            redirect_to users_path\n          end\n        end\n      "],["\n        class UsersController < ApplicationController\n          def index\n            render inertia: 'Users/Index', props: { users: User.all }\n          end\\n\n          def create\n            User.create params.require(:user).permit(:first_name, :last_name, :email)\\n\n            redirect_to users_path\n          end\n        end\n      "]);return _=function(){return e},e}function g(){var e=Object(t.a)(["\n        class UsersController extends Controller\n        {\n            public function index()\n            {\n                return Inertia::render('Users/Index', [\n                  'users' => User::all(),\n                ]);\n            }\n\n            public function store()\n            {\n                User::create(\n                    Request::validate([\n                        'first_name' => ['required', 'max:50'],\n                        'last_name' => ['required', 'max:50'],\n                        'email' => ['required', 'max:50', 'email'],\n                    ])\n                );\n\n                return Redirect::route('users');\n            }\n        }\n      "],["\n        class UsersController extends Controller\n        {\n            public function index()\n            {\n                return Inertia::render('Users/Index', [\n                  'users' => User::all(),\n                ]);\n            }\\n\n            public function store()\n            {\n                User::create(\n                    Request::validate([\n                        'first_name' => ['required', 'max:50'],\n                        'last_name' => ['required', 'max:50'],\n                        'email' => ['required', 'max:50', 'email'],\n                    ])\n                );\\n\n                return Redirect::route('users');\n            }\n        }\n      "]);return g=function(){return e},e}function j(){var e=Object(t.a)(['\n        <script>\n          import { Inertia } from \'@inertiajs/inertia\'\n\n          let values = {\n            first_name: null,\n            last_name: null,\n            email: null,\n          }\n\n          function handleSubmit() {\n            Inertia.post(\'/users\', values)\n          }\n        <\/script>\n\n        <form on:submit|preventDefault={handleSubmit}>\n          <label for="first_name">First name:</label>\n          <input id="first_name" bind:value={values.first_name}>\n\n          <label for="last_name">Last name:</label>\n          <input id="last_name" bind:value={values.last_name}>\n\n          <label for="email">Email:</label>\n          <input id="email" bind:value={values.email}>\n\n          <button type="submit">Submit</button>\n        </form>\n      '],['\n        <script>\n          import { Inertia } from \'@inertiajs/inertia\'\\n\n          let values = {\n            first_name: null,\n            last_name: null,\n            email: null,\n          }\\n\n          function handleSubmit() {\n            Inertia.post(\'/users\', values)\n          }\n        <\/script>\\n\n        <form on:submit|preventDefault={handleSubmit}>\n          <label for="first_name">First name:</label>\n          <input id="first_name" bind:value={values.first_name}>\\n\n          <label for="last_name">Last name:</label>\n          <input id="last_name" bind:value={values.last_name}>\\n\n          <label for="email">Email:</label>\n          <input id="email" bind:value={values.email}>\\n\n          <button type="submit">Submit</button>\n        </form>\n      ']);return j=function(){return e},e}function y(){var e=Object(t.a)(['\n        import { Inertia } from \'@inertiajs/inertia\'\n        import React, { useState } from \'react\'\n\n        export default function Edit() {\n          const [values, setValues] = useState({\n            first_name: "",\n            last_name: "",\n            email: "",\n          })\n\n          function handleChange(e) {\n            const key = e.target.id;\n            const value = e.target.value\n            setValues(values => ({\n                ...values,\n                [key]: value,\n            }))\n          }\n\n          function handleSubmit(e) {\n            e.preventDefault()\n            Inertia.post(\'/users\', values)\n          }\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <label htmlFor="first_name">First name:</label>\n              <input id="first_name" value={values.first_name} onChange={handleChange} />\n              <label htmlFor="last_name">Last name:</label>\n              <input id="last_name" value={values.last_name} onChange={handleChange} />\n              <label htmlFor="email">Email:</label>\n              <input id="email" value={values.email} onChange={handleChange} />\n              <button type="submit">Submit</button>\n            </form>\n          )\n        }\n      '],['\n        import { Inertia } from \'@inertiajs/inertia\'\n        import React, { useState } from \'react\'\\n\n        export default function Edit() {\n          const [values, setValues] = useState({\n            first_name: "",\n            last_name: "",\n            email: "",\n          })\\n\n          function handleChange(e) {\n            const key = e.target.id;\n            const value = e.target.value\n            setValues(values => ({\n                ...values,\n                [key]: value,\n            }))\n          }\\n\n          function handleSubmit(e) {\n            e.preventDefault()\n            Inertia.post(\'/users\', values)\n          }\\n\n          return (\n            <form onSubmit={handleSubmit}>\n              <label htmlFor="first_name">First name:</label>\n              <input id="first_name" value={values.first_name} onChange={handleChange} />\n              <label htmlFor="last_name">Last name:</label>\n              <input id="last_name" value={values.last_name} onChange={handleChange} />\n              <label htmlFor="email">Email:</label>\n              <input id="email" value={values.email} onChange={handleChange} />\n              <button type="submit">Submit</button>\n            </form>\n          )\n        }\n      ']);return y=function(){return e},e}function O(){var e=Object(t.a)(['\n        <template>\n          <form @submit.prevent="submit">\n            <label for="first_name">First name:</label>\n            <input id="first_name" v-model="form.first_name" />\n            <label for="last_name">Last name:</label>\n            <input id="last_name" v-model="form.last_name" />\n            <label for="email">Email:</label>\n            <input id="email" v-model="form.email" />\n            <button type="submit">Submit</button>\n          </form>\n        </template>\n\n        <script>\n        export default {\n          data() {\n            return {\n              form: {\n                first_name: null,\n                last_name: null,\n                email: null,\n              },\n            }\n          },\n          methods: {\n            submit() {\n              this.$inertia.post(\'/users\', this.form)\n            },\n          },\n        }\n        <\/script>\n      '],['\n        <template>\n          <form @submit.prevent="submit">\n            <label for="first_name">First name:</label>\n            <input id="first_name" v-model="form.first_name" />\n            <label for="last_name">Last name:</label>\n            <input id="last_name" v-model="form.last_name" />\n            <label for="email">Email:</label>\n            <input id="email" v-model="form.email" />\n            <button type="submit">Submit</button>\n          </form>\n        </template>\\n\n        <script>\n        export default {\n          data() {\n            return {\n              form: {\n                first_name: null,\n                last_name: null,\n                email: null,\n              },\n            }\n          },\n          methods: {\n            submit() {\n              this.$inertia.post(\'/users\', this.form)\n            },\n          },\n        }\n        <\/script>\n      ']);return O=function(){return e},e}var x={title:"Forms",links:[{url:"#submitting-forms",name:"Submitting forms"},{url:"#server-side-validation",name:"Server-side validation"},{url:"#file-uploads",name:"File uploads"},{url:"#classic-xhr-submits",name:"Classic XHR submits"}]},S={meta:x},C=d.b;function I(e){var n=e.components,a=Object(i.a)(e,["components"]);return Object(o.b)(C,Object(r.a)({},S,a,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",null,"Forms"),Object(o.b)("h2",null,"Submitting forms"),Object(o.b)("p",null,"While it's possible to make classic form submissions with Inertia, it's not recommended, as they cause full page reloads. Instead, it's better to intercept form submissions and then make the ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/requests"}),"request")," using Inertia."),Object(o.b)(b.a,{examples:[{name:"Vue.js",language:"twig",code:u()(O())},{name:"React",language:"jsx",code:u()(y())},{name:"Svelte",language:"html",code:u()(j())}],mdxType:"TabbedCodeExamples"}),Object(o.b)("p",null,"Unlike a classic ajax submitted form, with Inertia you don't handle the post submission behaviour client-side. Rather, you do this server-side using a ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/redirects"}),"redirect"),". And, of course, there is nothing stopping you from redirecting right back to the page that you're on."),Object(o.b)(b.a,{examples:[{name:"Laravel",language:"php",code:u()(g())},{name:"Rails",language:"ruby",code:u()(_())}],mdxType:"TabbedCodeExamples"}),Object(o.b)("h2",null,"Server-side validation"),Object(o.b)("p",null,"Handling server-side validation errors (",Object(o.b)("inlineCode",{parentName:"p"},"422")," responses) in Inertia works a little different than a classic ajax-driven form, where you catch the validation errors in the response and then update the form state. The trick is to handle the validation errors more like a server-side framework."),Object(o.b)("p",null,"First, you submit your form using Inertia. If there are validation errors, you redirect server-side back to your form page, including the errors in the session. Your server-side framework likely already does this automatically."),Object(o.b)("p",null,"From there you need to send those error messages to your form page component. You can do this in your controller, but it's better to simply do this automatically for all your page components. You can use the Inertia ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/shared-data"}),"share")," functionality to accomplish this."),Object(o.b)("p",null,"Some adapters, such as the Laravel adapter (as of ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/inertiajs/inertia-laravel/releases/tag/v0.2.9"}),"v0.2.9"),"), do this automatically, making the validation errors available via the ",Object(o.b)("inlineCode",{parentName:"p"},"errors")," prop. However, if you'd like to share them manually (maybe you'd like the errors in a different format), you can still do this:"),Object(o.b)(b.a,{examples:[{name:"Laravel",language:"php",code:u()(h())},{name:"Rails",language:"ruby",code:u()(v())}],mdxType:"TabbedCodeExamples"}),Object(o.b)("p",null,"Now the validation errors will be available as part of your page props, and since they are reactive your template will automatically display them. Here's an updated version of the form example above that displays server-side validation errors."),Object(o.b)(b.a,{examples:[{name:"Vue.js",language:"twig",code:u()(c())},{name:"React",language:"jsx",code:u()(p())},{name:"Svelte",language:"html",code:u()(f())}],mdxType:"TabbedCodeExamples"}),Object(o.b)("p",null,"While this is very similar to how you would normally do classic server-side form submissions, this approach is much nicer, since you're not reloading the whole page and rehydrating form input data."),Object(o.b)("h2",null,"File uploads"),Object(o.b)("p",null,"The trick to uploading\xa0files with Inertia (via XHR) is using the ",Object(o.b)("inlineCode",{parentName:"p"},"FormData")," object. Here is a simple example of using ",Object(o.b)("inlineCode",{parentName:"p"},"FormData")," with Inertia."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"var data = new FormData()\ndata.append('first_name', first_name || '')\ndata.append('last_name', last_name || '')\ndata.append('email', email || '')\ndata.append('password', password || '')\ndata.append('photo', photo || '')\n\nInertia.post('/users', data)\n")),Object(o.b)("p",null,"You can learn more about ",Object(o.b)("inlineCode",{parentName:"p"},"FormData")," interface ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/FormData"}),"here"),"."),Object(o.b)("h2",null,"Classic XHR submits"),Object(o.b)("p",null,"Using Inertia to submit forms works well for the vast majority of situations. However, in the event that you'd like more fine-grain control over the form submission, there's nothing stopping you from making a classic XHR request. An excellent library to use here is ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/axios/axios"}),"axios"),", which is what Inertia uses under the hood."))}I.isMDXComponent=!0}},[["0zQ/",0,2,5,1,3,4]]]);