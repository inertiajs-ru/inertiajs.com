_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[14],{"59oN":function(e,n,t){"use strict";var r=t("q1tI"),a=t.n(r),s=t("qKvR");a.a.createElement;n.a=function(e){var n=e.children;return Object(s.a)("div",{className:"my-8 px-6 py-4 text-orange-900 text-base leading-normal bg-orange-200 rounded-r border-l-4 border-orange-400",children:n})}},FKrS:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/csrf-protection",function(){return t("ciSF")}])},ciSF:function(e,n,t){"use strict";t.r(n),t.d(n,"meta",(function(){return f})),t.d(n,"default",(function(){return j}));var r=t("h4VS"),a=t("wx14"),s=t("Ff2n"),i=t("q1tI"),o=t.n(i),c=t("7ljp"),l=t("B+lO"),p=t.n(l),u=t("5Yp1"),h=t("59oN"),b=t("SrvX");t("qKvR"),o.a.createElement;function d(){var e=Object(r.a)(["\n        # todo\n      "]);return d=function(){return e},e}function m(){var e=Object(r.a)(["\n        use Throwable;\n        use Inertia\\Inertia;\n\n        /**\n         * Prepare exception for rendering.\n         *\n         * @param  \\Throwable  $e\n         * @return \\Throwable\n         */\n        public function render($request, Throwable $e)\n        {\n            $response = parent::render($request, $e);\n\n            if ($response->status() === 419) {\n                return back()->with([\n                    'message' => 'The page expired, please try again.',\n                ]);\n            }\n\n            return $response;\n        }\n      "],["\n        use Throwable;\n        use Inertia\\\\Inertia;\\n\n        /**\n         * Prepare exception for rendering.\n         *\n         * @param  \\\\Throwable  $e\n         * @return \\\\Throwable\n         */\n        public function render($request, Throwable $e)\n        {\n            $response = parent::render($request, $e);\\n\n            if ($response->status() === 419) {\n                return back()->with([\n                    'message' => 'The page expired, please try again.',\n                ]);\n            }\\n\n            return $response;\n        }\n      "]);return m=function(){return e},e}var f={title:"CSRF protection",links:[{url:"#making-requests",name:"Making requests"},{url:"#handling-mismatches",name:"Handling mismatches"}]},O={meta:f},g=u.b;function j(e){var n=e.components,t=Object(s.a)(e,["components"]);return Object(c.b)(g,Object(a.a)({},O,t,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",null,"CSRF protection"),Object(c.b)("h2",null,"Making requests"),Object(c.b)("p",null,"If your web framework includes cross-site request forgery (CSRF) protection, you'll need to ensure that each Inertia requests includes the necessary token for ",Object(c.b)("inlineCode",{parentName:"p"},"POST"),", ",Object(c.b)("inlineCode",{parentName:"p"},"PUT"),", ",Object(c.b)("inlineCode",{parentName:"p"},"PATCH")," and ",Object(c.b)("inlineCode",{parentName:"p"},"DELETE")," requests."),Object(c.b)("p",null,"One solution is to include the CSRF token as a prop on every response. You can then use the token when making Inertia requests."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"this.$inertia.post('/users', {\n  name: this.name,\n  email: this.email,\n  _token: this.$page.props.csrf_token,\n})\n")),Object(c.b)("p",null,"You can even use the ",Object(c.b)("a",{href:"/shared-data"},"shared data")," functionality to automatically include the ",Object(c.b)("inlineCode",{parentName:"p"},"csrf_token")," with each response."),Object(c.b)("p",null,"However, a better approach is to use the CSRF functionality already built into ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/axios/axios"}),"axios")," for this. Axios is the HTTP library that Inertia uses under the hood."),Object(c.b)("p",null,"Axios automatically checks for the existence of an ",Object(c.b)("inlineCode",{parentName:"p"},"XSRF-TOKEN")," cookie. If it's present, it will then include the token in an ",Object(c.b)("inlineCode",{parentName:"p"},"X-XSRF-TOKEN")," header for any requests it makes."),Object(c.b)("p",null,"The easiest way to implement this is using server-side middleware. Simply include the ",Object(c.b)("inlineCode",{parentName:"p"},"XSRF-TOKEN")," cookie on each response, and then verify the token using the ",Object(c.b)("inlineCode",{parentName:"p"},"X-XSRF-TOKEN")," header sent in the requests from axios."),Object(c.b)("p",null,"Some frameworks, such as ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/laravel/framework/blob/5.8/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php#L176-L188"}),"Laravel"),", do this automatically, meaning there is no configuration required."),Object(c.b)(h.a,{mdxType:"Notice"},"If you're using Laravel, be sure to omit the ",Object(c.b)("inlineCode",{class:"bg-gray-600"},"csrf-token")," meta tag from your project, as this will prevent the CSRF token from refreshing properly."),Object(c.b)("h2",null,"Handling mismatches"),Object(c.b)("p",null,"When a CSRF token mismatch occurs, your web framework will likely throw an exception that results in an error response. For example, in Laravel a ",Object(c.b)("inlineCode",{parentName:"p"},"TokenMismatchException")," is thrown, which results in a ",Object(c.b)("inlineCode",{parentName:"p"},"419")," error page. Since that isn't a valid Inertia response, the error is shown in a modal."),Object(c.b)("video",{controls:!0},Object(c.b)("source",{src:"/mp4/csrf-mismatch-modal.mp4",type:"video/mp4"})),Object(c.b)("p",null,"But, this isn't a great user experience. A better way to handle these errors is to return a redirect back to the previous page, along with a flash message that the page expired. This will result in a valid Inertia response, with the flash message available as a prop, which you can then display to the user. Note, you'll need to share your ",Object(c.b)("a",Object(a.a)({parentName:"p"},{href:"/shared-data#flash-messages"}),"flash messages")," with Inertia.js for this to work."),Object(c.b)(b.a,{examples:[{name:"Laravel",language:"php",description:"Extend the render() method in your App\\Exceptions\\Handler.php.",code:p()(m())},{name:"Rails",language:"ruby",code:p()(d())}],mdxType:"TabbedCodeExamples"}),Object(c.b)("p",null,'The end result is a much better experience for your users. Instead of seeing the error modal, they are instead presented with a message that the "page expired", and are asked to try again.'),Object(c.b)("video",{controls:!0},Object(c.b)("source",{src:"/mp4/csrf-mismatch-warning.mp4",type:"video/mp4"})))}j.isMDXComponent=!0}},[["FKrS",0,2,5,1,3,4]]]);