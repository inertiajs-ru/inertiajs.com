_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[32],{"59oN":function(e,n,a){"use strict";var t=a("q1tI"),r=a.n(t),s=a("qKvR");r.a.createElement;n.a=function(e){var n=e.children;return Object(s.a)("div",{className:"my-8 px-6 py-4 text-orange-900 text-base leading-normal bg-orange-200 rounded-r border-l-4 border-orange-400",children:n})}},A6ef:function(e,n,a){"use strict";a.r(n),a.d(n,"meta",(function(){return O})),a.d(n,"default",(function(){return L}));var t=a("wx14"),r=a("h4VS"),s=a("Ff2n"),i=a("q1tI"),o=a.n(i),u=a("7ljp"),c=a("B+lO"),l=a.n(c),d=a("5Yp1"),p=a("59oN"),h=a("SrvX");a("qKvR"),o.a.createElement;function m(){var e=Object(r.a)(["\n        <script>\n          import { page } from '@inertiajs/inertia-svelte'\n        <\/script>\n\n        <main>\n          <header></header>\n          <content>\n            {#if $page.props.flash.message}\n              <div class=\"alert\">{$page.props.flash.message}</div>\n            {/if}\n            <slot />\n          </content>\n          <footer></footer>\n        </main>\n      "],["\n        <script>\n          import { page } from '@inertiajs/inertia-svelte'\n        <\/script>\\n\n        <main>\n          <header></header>\n          <content>\n            {#if $page.props.flash.message}\n              <div class=\"alert\">{$page.props.flash.message}</div>\n            {/if}\n            <slot />\n          </content>\n          <footer></footer>\n        </main>\n      "]);return m=function(){return e},e}function f(){var e=Object(r.a)(["\n        import { usePage } from '@inertiajs/inertia-react'\n\n        export default function Layout({ children }) {\n          const { flash } = usePage().props\n\n          return (\n            <main>\n              <header></header>\n              <content>\n                {flash.message && (\n                  <div class=\"alert\">{flash.message}</div>\n                )}\n                {children}\n              </content>\n              <footer></footer>\n            </main>\n          )\n        }\n      "],["\n        import { usePage } from '@inertiajs/inertia-react'\\n\n        export default function Layout({ children }) {\n          const { flash } = usePage().props\\n\n          return (\n            <main>\n              <header></header>\n              <content>\n                {flash.message && (\n                  <div class=\"alert\">{flash.message}</div>\n                )}\n                {children}\n              </content>\n              <footer></footer>\n            </main>\n          )\n        }\n      "]);return f=function(){return e},e}function g(){var e=Object(r.a)(['\n        <template>\n          <main>\n            <header></header>\n            <content>\n              <div v-if="$page.props.flash.message" class="alert">\n                {{ $page.props.flash.message }}\n              </div>\n              <slot />\n            </content>\n            <footer></footer>\n          </main>\n        </template>\n      ']);return g=function(){return e},e}function b(){var e=Object(r.a)(["\n        class ApplicationController < ActionController::Base\n          inertia_share flash: -> {\n            {\n              message: flash.notice\n            }\n          }\n        end\n      "]);return b=function(){return e},e}function y(){var e=Object(r.a)(["\n        class HandleInertiaRequests extends Middleware\n        {\n            public function share(Request $request)\n            {\n                return array_merge(parent::share($request), [\n                    'flash' => [\n                        'message' => fn () => $request->session()->get('message')\n                    ],\n                ]);\n            }\n        }\n      "]);return y=function(){return e},e}function v(){var e=Object(r.a)(['\n        <script>\n          import { inertia, page } from \'@inertiajs/inertia-svelte\'\n        <\/script>\n\n        <main>\n          <header>\n            <div>You are logged in as: {$page.props.auth.user.name}</div>\n            <nav>\n              <a use:inertia href="/">Home</a>\n              <a use:inertia href="/about">About</a>\n              <a use:inertia href="/contact">Contact</a>\n            </nav>\n          </header>\n          <content>\n            <slot />\n          </content>\n          <footer></footer>\n        </main>\n      '],['\n        <script>\n          import { inertia, page } from \'@inertiajs/inertia-svelte\'\n        <\/script>\\n\n        <main>\n          <header>\n            <div>You are logged in as: {$page.props.auth.user.name}</div>\n            <nav>\n              <a use:inertia href="/">Home</a>\n              <a use:inertia href="/about">About</a>\n              <a use:inertia href="/contact">Contact</a>\n            </nav>\n          </header>\n          <content>\n            <slot />\n          </content>\n          <footer></footer>\n        </main>\n      ']);return v=function(){return e},e}function j(){var e=Object(r.a)(['\n        import { InertiaLink, usePage } from \'@inertiajs/inertia-react\'\n\n        export default function Layout({ children }) {\n          const { auth } = usePage().props\n\n          return (\n            <main>\n              <header>\n                <div>You are logged in as: {auth.user.name}</div>\n                <nav>\n                  <InertiaLink href="/">Home</InertiaLink>\n                  <InertiaLink href="/about">About</InertiaLink>\n                  <InertiaLink href="/contact">Contact</InertiaLink>\n                </nav>\n              </header>\n              <content>{children}</content>\n              <footer></footer>\n            </main>\n          )\n        }\n      '],['\n        import { InertiaLink, usePage } from \'@inertiajs/inertia-react\'\\n\n        export default function Layout({ children }) {\n          const { auth } = usePage().props\\n\n          return (\n            <main>\n              <header>\n                <div>You are logged in as: {auth.user.name}</div>\n                <nav>\n                  <InertiaLink href="/">Home</InertiaLink>\n                  <InertiaLink href="/about">About</InertiaLink>\n                  <InertiaLink href="/contact">Contact</InertiaLink>\n                </nav>\n              </header>\n              <content>{children}</content>\n              <footer></footer>\n            </main>\n          )\n        }\n      ']);return j=function(){return e},e}function q(){var e=Object(r.a)(['\n        <template>\n          <main>\n            <header>\n              <div>You are logged in as: {{ $page.props.auth.user.name }}</div>\n              <nav>\n                <inertia-link href="/">Home</inertia-link>\n                <inertia-link href="/about">About</inertia-link>\n                <inertia-link href="/contact">Contact</inertia-link>\n              </nav>\n            </header>\n            <content>\n              <slot />\n            </content>\n            <footer></footer>\n          </main>\n        </template>\n      ']);return q=function(){return e},e}function I(){var e=Object(r.a)(["\n        # Synchronously\n        inertia_share app_name: env['app.name']\n\n        # Lazily\n        inertia_share do\n          if logged_in?\n            {\n              'auth.user' => {id: logged_in_user.id}\n            }\n          end\n        end\n\n        # Lazily\n        inertia_share user_count: lambda { User.count }\n      "],["\n        # Synchronously\n        inertia_share app_name: env['app.name']\\n\n        # Lazily\n        inertia_share do\n          if logged_in?\n            {\n              'auth.user' => {id: logged_in_user.id}\n            }\n          end\n        end\\n\n        # Lazily\n        inertia_share user_count: lambda { User.count }\n      "]);return I=function(){return e},e}function x(){var e=Object(r.a)(["\n        /*\n        |----------------------------------------------------------------\n        | Via the HandleInertiaRequests middleware (recommended)\n        |----------------------------------------------------------------\n        */\n\n        class HandleInertiaRequests extends Middleware\n        {\n            public function share(Request $request)\n            {\n                return array_merge(parent::share($request), [\n\n                    // Synchronously\n                    'appName' => config('app.name'),\n\n                    // Lazily\n                    'user' => fn () => $request->user()\n                        ? $request->user()->only('id', 'name', 'email')\n                        : null,\n                ]);\n            }\n        }\n\n        /*\n        |----------------------------------------------------------------\n        | Manually\n        |----------------------------------------------------------------\n        */\n\n        use Inertia\\Inertia;\n\n        // Synchronously\n        Inertia::share('appName', config('app.name'));\n\n        // Lazily\n        Inertia::share('user', fn (Request $request) => $request->user()\n            ? $request->user()->only('id', 'name', 'email')\n            : null\n        );\n      "],["\n        /*\n        |----------------------------------------------------------------\n        | Via the HandleInertiaRequests middleware (recommended)\n        |----------------------------------------------------------------\n        */\\n\n        class HandleInertiaRequests extends Middleware\n        {\n            public function share(Request $request)\n            {\n                return array_merge(parent::share($request), [\\n\n                    // Synchronously\n                    'appName' => config('app.name'),\\n\n                    // Lazily\n                    'user' => fn () => $request->user()\n                        ? $request->user()->only('id', 'name', 'email')\n                        : null,\n                ]);\n            }\n        }\\n\n        /*\n        |----------------------------------------------------------------\n        | Manually\n        |----------------------------------------------------------------\n        */\\n\n        use Inertia\\\\Inertia;\\n\n        // Synchronously\n        Inertia::share('appName', config('app.name'));\\n\n        // Lazily\n        Inertia::share('user', fn (Request $request) => $request->user()\n            ? $request->user()->only('id', 'name', 'email')\n            : null\n        );\n      "]);return x=function(){return e},e}var O={title:"Shared data",links:[{url:"#top",name:"Introduction"},{url:"#sharing-data",name:"Sharing data"},{url:"#accessing-shared-data",name:"Accessing shared data"},{url:"#flash-messages",name:"Flash messages"}]},_={meta:O},w=d.b;function L(e){var n=e.components,a=Object(s.a)(e,["components"]);return Object(u.b)(w,Object(t.a)({},_,a,{components:n,mdxType:"MDXLayout"}),Object(u.b)("h1",null,"Shared data"),Object(u.b)("p",null,"Sometimes you need to access certain data on numerous pages within your application. For example, a common use-case for this is showing the current user in the site header. Passing this data manually in each response isn't practical. In these situations shared data can be useful."),Object(u.b)("h2",null,"Sharing data"),Object(u.b)("p",null,"The server-side adapters provide a way to preassign shared data for each request. This is typically done outside of your controllers. Shared data will be automatically merged with the page props provided in your controller."),Object(u.b)(h.a,{examples:[{name:"Laravel",language:"php",code:l()(x()),description:'The HandleInertiaRequests middleware provides a "share" method where you can define the data that is automatically shared with each Inertia response.'},{name:"Rails",language:"ruby",code:l()(I())}],mdxType:"TabbedCodeExamples"}),Object(u.b)(p.a,{mdxType:"Notice"},"Use this feature sparingly as shared data is included with every response."),Object(u.b)(p.a,{mdxType:"Notice"},"Page props and shared data are merged together, so be sure to namespace your shared data appropriately."),Object(u.b)("h2",null,"Accessing shared data"),Object(u.b)("p",null,"Once you've shared the data server-side, you'll then be able to access it within your page components as props. Shared data can even be accessed in non-page components, although not as props in those cases. Here's an example of how to do this in a layout component."),Object(u.b)(h.a,{examples:[{name:"Vue.js",description:"Access shared data using the $page property.",language:"twig",code:l()(q())},{name:"React",description:"Access shared data using the usePage() hook.",language:"jsx",code:l()(j())},{name:"Svelte",description:"Access shared data using the $page store.",language:"html",code:l()(v())}],mdxType:"TabbedCodeExamples"}),Object(u.b)("h2",null,"Flash messages"),Object(u.b)("p",null,"Another great use-case for shared data is flash messages. These are messages stored in the session only for the next request. You'll often set a flash message after completing a task and before redirecting to a different page."),Object(u.b)("p",null,"Here's a simple way to implement flash messages in your Inertia applications. First, share the flash message on each request."),Object(u.b)(h.a,{examples:[{name:"Laravel",language:"php",code:l()(y())},{name:"Rails",language:"ruby",code:l()(b())}],mdxType:"TabbedCodeExamples"}),Object(u.b)("p",null,"Next, display the flash message in a front-end component, such as the site layout."),Object(u.b)(h.a,{examples:[{name:"Vue.js",language:"twig",code:l()(g())},{name:"React",language:"jsx",code:l()(f())},{name:"Svelte",language:"html",code:l()(m())}],mdxType:"TabbedCodeExamples"}))}L.isMDXComponent=!0},h8qu:function(e,n,a){(window.__NEXT_P=window.__NEXT_P||[]).push(["/shared-data",function(){return a("A6ef")}])}},[["h8qu",0,2,5,1,3,4]]]);