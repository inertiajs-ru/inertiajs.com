_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[27],{"59oN":function(e,n,t){"use strict";var a=t("q1tI"),r=t.n(a),o=t("qKvR");r.a.createElement;n.a=function(e){var n=e.children;return Object(o.a)("div",{className:"my-8 px-6 py-4 text-orange-900 text-base leading-normal bg-orange-200 rounded-r border-l-4 border-orange-400",children:n})}},"RB/u":function(e,n,t){"use strict";t.r(n),t.d(n,"meta",(function(){return O})),t.d(n,"default",(function(){return _}));var a=t("wx14"),r=t("h4VS"),o=t("Ff2n"),i=t("q1tI"),s=t.n(i),l=t("7ljp"),p=t("B+lO"),c=t.n(p),d=t("5Yp1"),u=t("59oN"),m=t("SrvX");t("qKvR"),s.a.createElement;function b(){var e=Object(r.a)(['\n        <meta name="description" content="<%= meta %>">\n      ']);return b=function(){return e},e}function v(){var e=Object(r.a)(['\n        <meta name="description" content="{{ $meta }}">\n      ']);return v=function(){return e},e}function h(){var e=Object(r.a)(["\n        render inertia: 'Event', props: {event: event}, view_data: {meta: event.meta}\n      "]);return h=function(){return e},e}function w(){var e=Object(r.a)(["\n        return Inertia::render('Event', ['event' => $event])\n            ->withViewData(['meta' => $event->meta]);\n      "]);return w=function(){return e},e}function g(){var e=Object(r.a)(["\n        <meta name=\"twitter:title\" content=\"<%= page['props']['event'].title %>\">\n      "]);return g=function(){return e},e}function f(){var e=Object(r.a)(["\n        <meta name=\"twitter:title\" content=\"{{ $page['props']['event']->title }}\">\n      "]);return f=function(){return e},e}function y(){var e=Object(r.a)(["\n        class EventsController < ApplicationController\n          def show\n            event = Event.find(params[:id])\n\n            render inertia: 'Event/Show',\n              props: {\n                event: event.as_json(\n                  only: [ :id, :title, :start_date, :description ]\n                )\n              }\n          end\n        end\n      "],["\n        class EventsController < ApplicationController\n          def show\n            event = Event.find(params[:id])\\n\n            render inertia: 'Event/Show',\n              props: {\n                event: event.as_json(\n                  only: [ :id, :title, :start_date, :description ]\n                )\n              }\n          end\n        end\n      "]);return y=function(){return e},e}function j(){var e=Object(r.a)(["\n        use Inertia\\Inertia;\n\n        class EventsController extends Controller\n        {\n            public function show(Event $event)\n            {\n                return Inertia::render('Event/Show', [\n                    'event' => $event->only('id', 'title', 'start_date', 'description'),\n                ]);\n\n                // Alternatively, you can use the inertia() helper\n                return inertia('Event/Show', [\n                    'event' => $event->only('id', 'title', 'start_date', 'description'),\n                ]);\n\n            }\n        }\n      "],["\n        use Inertia\\\\Inertia;\\n\n        class EventsController extends Controller\n        {\n            public function show(Event $event)\n            {\n                return Inertia::render('Event/Show', [\n                    'event' => $event->only('id', 'title', 'start_date', 'description'),\n                ]);\\n\n                // Alternatively, you can use the inertia() helper\n                return inertia('Event/Show', [\n                    'event' => $event->only('id', 'title', 'start_date', 'description'),\n                ]);\\n\n            }\n        }\n      "]);return j=function(){return e},e}var O={title:"Responses",links:[{url:"#creating-responses",name:"Creating responses"},{url:"#root-template-data",name:"Root template data"},{url:"#maximum-response-size",name:"Maximum response size"}]},E={meta:O},x=d.b;function _(e){var n=e.components,t=Object(o.a)(e,["components"]);return Object(l.b)(x,Object(a.a)({},E,t,{components:n,mdxType:"MDXLayout"}),Object(l.b)("h1",null,"Responses"),Object(l.b)("h2",null,"Creating responses"),Object(l.b)("p",null,"In your controller, provide both the name of the JavaScript page component, as well as any props (data) for the page."),Object(l.b)("p",null,"In this example we're passing a single prop, called ",Object(l.b)("inlineCode",{parentName:"p"},"event"),", which contains four attributes (",Object(l.b)("inlineCode",{parentName:"p"},"id"),", ",Object(l.b)("inlineCode",{parentName:"p"},"title"),", ",Object(l.b)("inlineCode",{parentName:"p"},"start_date")," and ",Object(l.b)("inlineCode",{parentName:"p"},"description"),") to the ",Object(l.b)("inlineCode",{parentName:"p"},"Event/Show")," page component."),Object(l.b)(m.a,{examples:[{name:"Laravel",language:"php",code:c()(j()),description:"To make an Inertia response, use the Inertia render function. This method takes the component name, and allows you to pass props and view data."},{name:"Rails",language:"ruby",code:c()(y()),description:"To make an Inertia response, use the inertia renderer. This renderer takes the component name, and allows you to pass props and view_data as an options hash."}],mdxType:"TabbedCodeExamples"}),Object(l.b)(u.a,{mdxType:"Notice"},"To ensure that pages load quickly, only return the minimum data required for the page. Also, be aware that all data returned from the controllers will be visible client-side, so be sure to omit sensitive information."),Object(l.b)("h2",null,"Root template data"),Object(l.b)("p",null,"There are situations where you may want to access your prop data in your root Blade template. For example, you may want to add a meta description tag, Twitter card meta tags, or Facebook Open Graph meta tags."),Object(l.b)(m.a,{examples:[{name:"Laravel",language:"twig",code:c()(f()),description:"These props are available via the $page variable."},{name:"Rails",language:"erb",code:c()(g()),description:"These props are available via the page variable."}],mdxType:"TabbedCodeExamples"}),Object(l.b)("p",null,"Sometimes you may even want to provide data that will not be sent to your JavaScript component."),Object(l.b)(m.a,{examples:[{name:"Laravel",language:"php",code:c()(w()),description:"Do this using the withViewData() method."},{name:"Rails",language:"ruby",code:c()(h()),description:'Do this using the "view_data" option'}],mdxType:"TabbedCodeExamples"}),Object(l.b)("p",null,"You can then access this variable like a regular template variable."),Object(l.b)(m.a,{examples:[{name:"Laravel",language:"twig",code:c()(v())},{name:"Rails",language:"erb",code:c()(b())}],mdxType:"TabbedCodeExamples"}),Object(l.b)("h2",null,"Maximum response size"),Object(l.b)("p",null,"To enable client-side history navigation, all Inertia server responses are stored in the browser's history state. It's good to be aware that some browsers impose a size limit on how much data can be saved there. For example, ",Object(l.b)("a",Object(a.a)({parentName:"p"},{href:"https://developer.mozilla.org/en-US/docs/Web/API/History/pushState"}),"Firefox")," has a size limit of 640k characters (and throws a ",Object(l.b)("inlineCode",{parentName:"p"},"NS_ERROR_ILLEGAL_VALUE")," error if you exceed it). This is generally much more than you'll ever need, but it's good to be aware of this when building an Inertia application."))}_.isMDXComponent=!0},pAh3:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/responses",function(){return t("RB/u")}])}},[["pAh3",0,2,5,1,3,4]]]);